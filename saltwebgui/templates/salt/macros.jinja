{% macro key_list(mylist) %}
{# return a list from a source:

key_list(['A', 'B'])
<li>'A'</li>
<li>'B'</li>
#}
<ul class="list-unstyled">
{% for key in mylist %}
    <li>{{ key }}</li>
{% endfor %}
</ul>
{% endmacro %}



{% macro jobsTable(header, data) %}
{# This macro will render a table form the jobs list.

header = ('A', 'B', 'C')
data = {48484848484: {'A': 'dfdfd', 'B': 'datadata', 'C': 'datas'}}

By default is added the ID column which will also be use for linking to the job
#}
<thead>
    <tr>
        <th>ID</th>
{%- for colname in header %}
        <th>{{ colname }}</th>
{%- endfor %}
    </tr>
<thead>
<tbody>
{% if data is not mapping %}
    <tr><td>No values</td></tr>
{% else %}
    {% for record in data %}
    <tr>
	    <td><a href={{ url_for('salt.job', jid=record, action='list') }}>{{ record }}</a> <a href={{ url_for('salt.job', jid=record, action='raw') }}>(raw)</a></td>
        {% for key in header %}
        <td>{{ data[record][key]|default('-') }}</td>
        {% endfor %}
    </tr>
    {% endfor %}
{% endif %}
</tbody>
{% endmacro %}



{% macro jobTable(head, body) %}
{# This macro will render a table form the jobs list.

head = ('A', 'B', 'C')
body = [{'A': 'dfdfd', 'B': 'datadata', 'C': 'datas'}, {...}]

#}
<thead>
    <tr>
{%- for colname in head %}
        <th>{{ colname }}</th>
{%- endfor %}
    </tr>
<thead>
<tbody>
{% if data is not iterable %}
    <tr><td>No values</td></tr>
{% else %}
    {% for record in body %}
    <tr>
        {% for key in head %}
        <td>
	    <div class="table-cell">
             {{ record[key]|default('') }}
            </div>
	</td>
        {% endfor %}
    </tr>
    {% endfor %}
{% endif %}
</tbody>
{% endmacro %}




{% macro ParseJob(job) %}
{# Parse the single job and prettyfies it.
Input:
#}
{%- if not job %}
  <p>The current job is not parsable</p>
{%- elif job is string %}
  <pre>{{ job }}</pre>
{%- elif job is mapping %}
  {%- set result = job['result']|default("failed") %}
  {%- if result == true %}  {%- set class = 'correct' %}
  {%- elif result is none %}{%- set class = 'none' %}
  {%- else %}               {%- set class = 'failed' %}
  {%  endif %}
  {%- set job_changes = job["changes"]|default(dict()) %}
  {%- set job_pchanges = job["pchanges"]|default(dict()) %}
  {%- if job_changes %}{% set changes = job_changes %}
  {%- elif job_pchanges %}{% set changes = job_pchanges %}
  {%- else %}{% set changes = dict() %}
  {%- endif %}
  <li class="{{ class }}{% if changes.keys()|default(0)|length > 0 %} has_changes{% endif %}">
    <font>{{ job['__id__']|default('Not defined') }}</font>
    <font>[{{ job['name']|default('Not defined') }}]</font>
    <ul>
      <li class="{{ class }} comment">
        <font>{{ job['comment']|default('unset')|e }}</font>
      </li>
  {%- if changes %}
    {%- for _key in changes|default(dict()) %}
      {%- set change = changes[_key] %}
      <li class="{{ class }} changes">
      {%- if change is mapping %}
          ({{ _key|e }})
          <ul>
            {% for _k, _v in change.iteritems() %}
              <li class="{{ class }} changes">
                {{ _k|e }}:
                <pre>{{ _v|e }}</pre>
              </li>
            {% endfor %}
          </ul>
      {% else %}
        {{ _key|e }}:
        <pre>{{ change|e }}</pre>
      {% endif %}
      </li>
    {%- endfor %}
  {%- endif %}
      <li class="{{ class }} duration"><font>{{ job['duration']|default('unset') }}</font></li>
      <li class="{{ class }} __run_num__"><font>{{ job['__run_num__']|default('unset') }}</font></li>
    </ul>
  </li>
{%- endif %}
{% endmacro %}




{% macro MinionOutput(data) %}
{# Rendering of the json of the job run on minion #}
  {%- if not data %}
    <p>There is no output to show</p>
  {%- elif data is string %}
    <pre>{{ data }}</pre>
  {%- elif data is iterable %}
    <ul class="results">
      {%- for jobname in data %}
        {%- set job = data[jobname] %}
	{{ ParseJob(job) }}
      {%- endfor %}
    </ul>
  {% else %}
    <p>Error processing data!</p>
  {% endif %}
{% endmacro %}



{% macro minionsTable(minions) %}
{# This macro will render a table with the minions' list.

minions = ['minion1', 'minion2' ...]
#}
<thead>
    <tr>
        <th>Minion name</th>
        <th>Informations</th>
        <th>Quick commands</th>
    </tr>
<thead>
<tbody>
{% if minions is not iterable %}
    <tr><td>No values</td></tr>
{% else %}
    {% for minion in minions %}
    <tr>
        <td><b>{{ minion }}</b></td>
	<td>Show <a href={{ url_for('salt.minions', action='pillars', minion=minion) }}>pillars</a>,
            <a href={{ url_for('salt.minions', action='tops', minion=minion) }}>tops</a> or
            <a href={{ url_for('salt.minions', action='grains', minion=minion) }}>grains</a></td>
        <td>refresh pillars</td>
    </tr>
    {% endfor %}
{% endif %}
</tbody>
{% endmacro %}



